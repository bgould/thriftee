<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2013-2016 Benjamin Gould, and others

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>thriftee-root</artifactId>
    <groupId>org.thriftee</groupId>
    <version>0.6.0-SNAPSHOT</version>
  </parent>

  <artifactId>thriftee-core</artifactId>
  <name>thriftee-core</name>
  <description>Core functionality for ThriftEE</description>

  <dependencies>
    <!-- compile scoped dependencies -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.thriftee</groupId>
      <artifactId>thriftee-libthrift-ext</artifactId>
    </dependency>
    <dependency>
      <groupId>org.thriftee</groupId>
      <artifactId>thrift-compiler</artifactId>
    </dependency>
    <dependency>
      <groupId>org.restlet.jee</groupId>
      <artifactId>org.restlet</artifactId>
    </dependency>
    <!--
    <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-core</artifactId>
        <version>3.3.3</version>
    </dependency>
     -->
    <dependency>
      <groupId>com.yahoo.platform.yui</groupId>
      <artifactId>yuicompressor</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.json</groupId>
      <artifactId>javax.json-api</artifactId>
    </dependency>
    <!-- test scoped dependencies -->
    <dependency>
      <groupId>org.thriftee</groupId>
      <artifactId>thriftee-test-objects</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.json</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.thriftee</groupId>
        <artifactId>thrift-maven-plugin</artifactId>
      </plugin>
<!--
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <version>1.5</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <classpathScope>test</classpathScope>
              <source><![CDATA[
def incldir = new File(project.basedir, "target/thrift-includes");
def inputdir = new File(project.basedir, "src/main/thrift")
def outputdir = new File(project.basedir, "target/generated-sources/thrift")
def inpath = inputdir.absolutePath
def outpath = outputdir.absolutePath
def inclpath = incldir.absolutePath
def filenames = new FileNameFinder().getFileNames(inpath, "*.thrift")
def compiler = org.apache.thrift.compiler.ThriftCompiler.newCompiler()
incldir.mkdirs()
outputdir.mkdirs()

def inclname = 'org.thriftee.thrift.schema.idl.thrift'
def inclfile = new File(incldir, inclname)
inclfile.text = compiler.class.classLoader.getResource(inclname).openStream().text

filenames.each { filename ->
  log.info "processing thrift file: " + filename
  def execResult = compiler.execute(
    "-gen", "java:beans",
    "-I", inclpath,
    "-out", outpath,
    filename
  )
  if (execResult.errString != null && !"".equals(execResult.errString)) {
    log.warn execResult.errString
  }
  if (execResult.outString != null && !"".equals(execResult.outString)) {
    log.info execResult.outString
  }
  if (execResult.exitCode != 0) {
    log.error "execution result: " + execResult.exitCode
    fail()
  }
}
def resources = new org.apache.maven.model.Resource()
resources.directory = inpath
resources.addInclude("*.thrift")
project.addResource(resources)
project.addCompileSourceRoot(outpath)
              ]]></source>
            </configuration>
          </execution>
        </executions>
      </plugin>
-->
    </plugins>
  </build>
</project>
