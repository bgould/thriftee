//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.SortOrder = {
'ASC' : 0,
'DESC' : 1
};
Filter = module.exports.Filter = function(args) {
  this.property = null;
  this.value = null;
  if (args) {
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Filter.prototype = {};
Filter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Filter.prototype.write = function(output) {
  output.writeStructBegin('Filter');
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 1);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Name = module.exports.Name = function(args) {
  this.firstName = null;
  this.lastName = null;
  this.nickName = null;
  if (args) {
    if (args.firstName !== undefined) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined) {
      this.lastName = args.lastName;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
  }
};
Name.prototype = {};
Name.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Name.prototype.write = function(output) {
  output.writeStructBegin('Name');
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 1);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 2);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 3);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sort = module.exports.Sort = function(args) {
  this.property = null;
  this.order = null;
  if (args) {
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
  }
};
Sort.prototype = {};
Sort.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sort.prototype.write = function(output) {
  output.writeStructBegin('Sort');
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 1);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 2);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

President = module.exports.President = function(args) {
  this.id = null;
  this.name = null;
  this.dateOfBirth = null;
  this.career = null;
  this.dateOfDeath = null;
  this.education = null;
  this.politicalParty = null;
  this.term = null;
  this.selected = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.dateOfBirth !== undefined) {
      this.dateOfBirth = args.dateOfBirth;
    }
    if (args.career !== undefined) {
      this.career = args.career;
    }
    if (args.dateOfDeath !== undefined) {
      this.dateOfDeath = args.dateOfDeath;
    }
    if (args.education !== undefined) {
      this.education = args.education;
    }
    if (args.politicalParty !== undefined) {
      this.politicalParty = args.politicalParty;
    }
    if (args.term !== undefined) {
      this.term = args.term;
    }
    if (args.selected !== undefined) {
      this.selected = args.selected;
    }
  }
};
President.prototype = {};
President.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.name = new ttypes.Name();
        this.name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateOfBirth = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.career = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dateOfDeath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.education = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.politicalParty = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.term = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.selected = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

President.prototype.write = function(output) {
  output.writeStructBegin('President');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRUCT, 2);
    this.name.write(output);
    output.writeFieldEnd();
  }
  if (this.dateOfBirth !== null && this.dateOfBirth !== undefined) {
    output.writeFieldBegin('dateOfBirth', Thrift.Type.STRING, 3);
    output.writeString(this.dateOfBirth);
    output.writeFieldEnd();
  }
  if (this.career !== null && this.career !== undefined) {
    output.writeFieldBegin('career', Thrift.Type.STRING, 4);
    output.writeString(this.career);
    output.writeFieldEnd();
  }
  if (this.dateOfDeath !== null && this.dateOfDeath !== undefined) {
    output.writeFieldBegin('dateOfDeath', Thrift.Type.STRING, 5);
    output.writeString(this.dateOfDeath);
    output.writeFieldEnd();
  }
  if (this.education !== null && this.education !== undefined) {
    output.writeFieldBegin('education', Thrift.Type.STRING, 6);
    output.writeString(this.education);
    output.writeFieldEnd();
  }
  if (this.politicalParty !== null && this.politicalParty !== undefined) {
    output.writeFieldBegin('politicalParty', Thrift.Type.STRING, 7);
    output.writeString(this.politicalParty);
    output.writeFieldEnd();
  }
  if (this.term !== null && this.term !== undefined) {
    output.writeFieldBegin('term', Thrift.Type.STRING, 8);
    output.writeString(this.term);
    output.writeFieldEnd();
  }
  if (this.selected !== null && this.selected !== undefined) {
    output.writeFieldBegin('selected', Thrift.Type.STRING, 9);
    output.writeString(this.selected);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

