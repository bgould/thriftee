//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./org_thriftee_examples_presidents_types');
//HELPER FUNCTIONS AND STRUCTURES

PresidentService_getPresidentByUniqueId_args = function(args) {
  this.arg0 = null;
  if (args) {
    if (args.arg0 !== undefined) {
      this.arg0 = args.arg0;
    }
  }
};
PresidentService_getPresidentByUniqueId_args.prototype = {};
PresidentService_getPresidentByUniqueId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arg0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PresidentService_getPresidentByUniqueId_args.prototype.write = function(output) {
  output.writeStructBegin('PresidentService_getPresidentByUniqueId_args');
  if (this.arg0 !== null && this.arg0 !== undefined) {
    output.writeFieldBegin('arg0', Thrift.Type.I32, 1);
    output.writeI32(this.arg0);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PresidentService_getPresidentByUniqueId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PresidentService_getPresidentByUniqueId_result.prototype = {};
PresidentService_getPresidentByUniqueId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.President();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PresidentService_getPresidentByUniqueId_result.prototype.write = function(output) {
  output.writeStructBegin('PresidentService_getPresidentByUniqueId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PresidentService_getPresidents_args = function(args) {
};
PresidentService_getPresidents_args.prototype = {};
PresidentService_getPresidents_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PresidentService_getPresidents_args.prototype.write = function(output) {
  output.writeStructBegin('PresidentService_getPresidents_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PresidentService_getPresidents_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PresidentService_getPresidents_result.prototype = {};
PresidentService_getPresidents_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.President();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PresidentService_getPresidents_result.prototype.write = function(output) {
  output.writeStructBegin('PresidentService_getPresidents_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PresidentServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PresidentServiceClient.prototype = {};
PresidentServiceClient.prototype.seqid = function() { return this._seqid; }
PresidentServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
PresidentServiceClient.prototype.getPresidentByUniqueId = function(arg0, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_getPresidentByUniqueId(arg0);
};

PresidentServiceClient.prototype.send_getPresidentByUniqueId = function(arg0) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPresidentByUniqueId', Thrift.MessageType.CALL, this.seqid());
  var args = new PresidentService_getPresidentByUniqueId_args();
  args.arg0 = arg0;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PresidentServiceClient.prototype.recv_getPresidentByUniqueId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PresidentService_getPresidentByUniqueId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPresidentByUniqueId failed: unknown result');
};
PresidentServiceClient.prototype.getPresidents = function(callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_getPresidents();
};

PresidentServiceClient.prototype.send_getPresidents = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPresidents', Thrift.MessageType.CALL, this.seqid());
  var args = new PresidentService_getPresidents_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PresidentServiceClient.prototype.recv_getPresidents = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PresidentService_getPresidents_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPresidents failed: unknown result');
};
PresidentServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PresidentServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PresidentServiceProcessor.prototype.process_getPresidentByUniqueId = function(seqid, input, output) {
  var args = new PresidentService_getPresidentByUniqueId_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPresidentByUniqueId(args.arg0, function (err, result) {
    var result = new PresidentService_getPresidentByUniqueId_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPresidentByUniqueId", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

PresidentServiceProcessor.prototype.process_getPresidents = function(seqid, input, output) {
  var args = new PresidentService_getPresidents_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPresidents(function (err, result) {
    var result = new PresidentService_getPresidents_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPresidents", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

